api testing: https://app.getpostman.com/join-team?invite_code=c3853dc772e08298d0d4513e46ef077a8f2393e750ac28f8e5ff7f09b317933c&target_code=3dc09f6f5c9562af071fe0644c3dac28

==============generate secret key by terminal=============
cd target/classes
java com.example.backend.security.SecretKeyGenerator

========= rasa install and activate ============
py -3.9 -m venv rasa-env
.\rasa-env\Scripts\Activate.ps1
python -m pip install --upgrade pip
pip install rasa
pip install rasa requests
rasa init
(rasa train)

====== start server for AI
(check Ollama)
curl http://localhost:11434/api/tags
#Terminal 1 (if Ollama have not run yet)
ollama serve

#start mongo in specific port
mongod --port 27018 --dbpath "C:\data\db"

# Terminal 2(rasa-env)
rasa run --enable-api --cors "*" --port 5005

# Terminal 3(rasa-env)
rasa run actions --port 5055

#Terminal 4 (for checking)
curl http://localhost:5005/status





/users* matches /users and /users/ but not deeply nested paths like /users/abc/def. For full coverage, use both /users and /users/**.

/users* matches /users, /users/, /users123, etc.


Rasa
→ A trainable conversational AI framework
→ You must define intents, examples, and responses
→ Can handle structured dialogues, call APIs (e.g., to database, weather, etc.)
→ Only responds meaningfully to questions it’s been trained for

Ollama
→ A local LLM runner (e.g., LLaMA, Mistral)
→ No training needed — uses pre-trained models
→ Responds to open-ended prompts, like GPT
→ Returns raw text only, no built-in logic, memory, or API support